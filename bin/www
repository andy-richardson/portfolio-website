#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('andythedeveloper:server');
var https = require('https');
var http = require('http');
var fs = require('fs');

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
* Create HTTPS server.
*/
var credentials = {
	key: fs.readFileSync('/root/ssl/andythedeveloper.com.key', 'utf8'),
	cert: fs.readFileSync('/root/ssl/andythedeveloper_com.crt', 'utf8'),
	ca: fs.readFileSync('/root/ssl/andythedeveloper_com.ca-bundle', 'utf8')	
};
var server = https.createServer(credentials, app);

/**
* HTTP redirect to HTTPS
*/
http.createServer(function (req, res) {
	res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
	res.end();
}).listen(80);

/**
* SERVER FOR DEBUGGING ONLY
*/
// var server = http.createServer(app);

/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
		case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
		default:
		throw error;
	}
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
